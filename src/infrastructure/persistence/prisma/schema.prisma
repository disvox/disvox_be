// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../../../../__generated__/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String           @id @default(uuid())
  username      String
  discriminator String
  email         String           @unique
  avatarUrl     String           @default("") @map(name: "avatar_url")
  lastSeen      DateTime
  createdAt     DateTime         @default(now()) @map(name: "created_at") @db.Timestamptz(0)
  updatedAt     DateTime         @updatedAt @map(name: "updated_at") @db.Timestamptz(0)
  ownedServers  Server[]
  servers       UserServer[]
  roles         UserRole[]
  permissions   UserPermission[]

  @@unique([username, discriminator])
  @@map(name: "users")
}

model Server {
  id        String       @id @default(uuid())
  name      String
  createdAt DateTime     @default(now()) @map(name: "created_at") @db.Timestamptz(0)
  updatedAt DateTime     @updatedAt @map(name: "updated_at") @db.Timestamptz(0)
  ownerId   String
  owner     User         @relation(fields: [ownerId], references: [id])
  users     UserServer[]

  @@map(name: "servers")
}

model UserServer {
  userId   String @map(name: "user_id")
  serverId String @map(name: "server_id")
  user     User   @relation(fields: [userId], references: [id])
  server   Server @relation(fields: [serverId], references: [id])

  @@id([userId, serverId])
  @@map(name: "user_server")
}

model Permission {
  id         String           @id @default(uuid())
  action     String
  subject    String
  conditions String
  inverted   Boolean
  system     Boolean
  createdAt  DateTime         @default(now()) @map(name: "created_at") @db.Timestamptz(0)
  updatedAt  DateTime         @updatedAt @map(name: "updated_at") @db.Timestamptz(0)
  roles      RolePermission[]
  users      UserPermission[]

  @@map(name: "permissions")
}

model Role {
  id          String           @id @default(uuid())
  name        String
  isGlobal    Boolean          @map(name: "is_global")
  createdAt   DateTime         @default(now()) @map(name: "created_at") @db.Timestamptz(0)
  updatedAt   DateTime         @updatedAt @map(name: "updated_at") @db.Timestamptz(0)
  permissions RolePermission[]
  users       UserRole[]

  @@map(name: "roles")
}

model RolePermission {
  roleId       String     @map(name: "role_id")
  permissionId String     @map(name: "permission_id")
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
  @@map(name: "role_permission")
}

model UserRole {
  userId String @map(name: "user_id")
  roleId String @map(name: "role_id")
  user   User   @relation(fields: [userId], references: [id])
  role   Role   @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
  @@map(name: "user_role")
}

model UserPermission {
  userId       String     @map(name: "user_id")
  permissionId String     @map(name: "permission_id")
  user         User       @relation(fields: [userId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@id([userId, permissionId])
  @@map(name: "user_permission")
}
